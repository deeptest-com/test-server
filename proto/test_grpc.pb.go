// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: proto/test.proto

package dtproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	TestBidi(ctx context.Context, opts ...grpc.CallOption) (TestService_TestBidiClient, error)
	TestServerStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestServerStreamClient, error)
	TestClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_TestClientStreamClient, error)
	TestUnary(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) TestBidi(ctx context.Context, opts ...grpc.CallOption) (TestService_TestBidiClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], "/ptproto.TestService/TestBidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestBidiClient{stream}
	return x, nil
}

type TestService_TestBidiClient interface {
	Send(*TestRequest) error
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestBidiClient struct {
	grpc.ClientStream
}

func (x *testServiceTestBidiClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceTestBidiClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestServerStream(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (TestService_TestServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], "/ptproto.TestService/TestServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_TestServerStreamClient interface {
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceTestServerStreamClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestClientStream(ctx context.Context, opts ...grpc.CallOption) (TestService_TestClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], "/ptproto.TestService/TestClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceTestClientStreamClient{stream}
	return x, nil
}

type TestService_TestClientStreamClient interface {
	Send(*TestRequest) error
	CloseAndRecv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceTestClientStreamClient struct {
	grpc.ClientStream
}

func (x *testServiceTestClientStreamClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceTestClientStreamClient) CloseAndRecv() (*TestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) TestUnary(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/ptproto.TestService/TestUnary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations should embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	TestBidi(TestService_TestBidiServer) error
	TestServerStream(*TestRequest, TestService_TestServerStreamServer) error
	TestClientStream(TestService_TestClientStreamServer) error
	TestUnary(context.Context, *TestRequest) (*TestResponse, error)
}

// UnimplementedTestServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) TestBidi(TestService_TestBidiServer) error {
	return status.Errorf(codes.Unimplemented, "method TestBidi not implemented")
}
func (UnimplementedTestServiceServer) TestServerStream(*TestRequest, TestService_TestServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestServerStream not implemented")
}
func (UnimplementedTestServiceServer) TestClientStream(TestService_TestClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method TestClientStream not implemented")
}
func (UnimplementedTestServiceServer) TestUnary(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestUnary not implemented")
}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_TestBidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TestBidi(&testServiceTestBidiServer{stream})
}

type TestService_TestBidiServer interface {
	Send(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testServiceTestBidiServer struct {
	grpc.ServerStream
}

func (x *testServiceTestBidiServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceTestBidiServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_TestServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).TestServerStream(m, &testServiceTestServerStreamServer{stream})
}

type TestService_TestServerStreamServer interface {
	Send(*TestResponse) error
	grpc.ServerStream
}

type testServiceTestServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceTestServerStreamServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_TestClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).TestClientStream(&testServiceTestClientStreamServer{stream})
}

type TestService_TestClientStreamServer interface {
	SendAndClose(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testServiceTestClientStreamServer struct {
	grpc.ServerStream
}

func (x *testServiceTestClientStreamServer) SendAndClose(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceTestClientStreamServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_TestUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).TestUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ptproto.TestService/TestUnary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).TestUnary(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ptproto.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestUnary",
			Handler:    _TestService_TestUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestBidi",
			Handler:       _TestService_TestBidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "TestServerStream",
			Handler:       _TestService_TestServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestClientStream",
			Handler:       _TestService_TestClientStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/test.proto",
}
